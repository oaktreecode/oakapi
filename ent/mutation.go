// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/google/uuid"
	"github.com/oaktreecode/oakapi/ent/predicate"
	"github.com/oaktreecode/oakapi/ent/taxonomyvocabulary"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApiConfig          = "ApiConfig"
	TypeTaxonomyVocabulary = "TaxonomyVocabulary"
)

// ApiConfigMutation represents an operation that mutates the ApiConfig nodes in the graph.
type ApiConfigMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ApiConfig, error)
	predicates    []predicate.ApiConfig
}

var _ ent.Mutation = (*ApiConfigMutation)(nil)

// apiconfigOption allows management of the mutation configuration using functional options.
type apiconfigOption func(*ApiConfigMutation)

// newApiConfigMutation creates new mutation for the ApiConfig entity.
func newApiConfigMutation(c config, op Op, opts ...apiconfigOption) *ApiConfigMutation {
	m := &ApiConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeApiConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApiConfigID sets the ID field of the mutation.
func withApiConfigID(id int) apiconfigOption {
	return func(m *ApiConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *ApiConfig
		)
		m.oldValue = func(ctx context.Context) (*ApiConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApiConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApiConfig sets the old ApiConfig of the mutation.
func withApiConfig(node *ApiConfig) apiconfigOption {
	return func(m *ApiConfigMutation) {
		m.oldValue = func(context.Context) (*ApiConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApiConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApiConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApiConfigMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApiConfigMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApiConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the ApiConfigMutation builder.
func (m *ApiConfigMutation) Where(ps ...predicate.ApiConfig) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ApiConfigMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ApiConfig).
func (m *ApiConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApiConfigMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApiConfigMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApiConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ApiConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApiConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ApiConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApiConfigMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApiConfigMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApiConfigMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ApiConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApiConfigMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApiConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApiConfigMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ApiConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApiConfigMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ApiConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApiConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApiConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApiConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApiConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApiConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApiConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApiConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ApiConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApiConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ApiConfig edge %s", name)
}

// TaxonomyVocabularyMutation represents an operation that mutates the TaxonomyVocabulary nodes in the graph.
type TaxonomyVocabularyMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	vid           *string
	label         *string
	weight        *int
	addweight     *int
	description   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TaxonomyVocabulary, error)
	predicates    []predicate.TaxonomyVocabulary
}

var _ ent.Mutation = (*TaxonomyVocabularyMutation)(nil)

// taxonomyvocabularyOption allows management of the mutation configuration using functional options.
type taxonomyvocabularyOption func(*TaxonomyVocabularyMutation)

// newTaxonomyVocabularyMutation creates new mutation for the TaxonomyVocabulary entity.
func newTaxonomyVocabularyMutation(c config, op Op, opts ...taxonomyvocabularyOption) *TaxonomyVocabularyMutation {
	m := &TaxonomyVocabularyMutation{
		config:        c,
		op:            op,
		typ:           TypeTaxonomyVocabulary,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaxonomyVocabularyID sets the ID field of the mutation.
func withTaxonomyVocabularyID(id uuid.UUID) taxonomyvocabularyOption {
	return func(m *TaxonomyVocabularyMutation) {
		var (
			err   error
			once  sync.Once
			value *TaxonomyVocabulary
		)
		m.oldValue = func(ctx context.Context) (*TaxonomyVocabulary, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaxonomyVocabulary.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaxonomyVocabulary sets the old TaxonomyVocabulary of the mutation.
func withTaxonomyVocabulary(node *TaxonomyVocabulary) taxonomyvocabularyOption {
	return func(m *TaxonomyVocabularyMutation) {
		m.oldValue = func(context.Context) (*TaxonomyVocabulary, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaxonomyVocabularyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaxonomyVocabularyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaxonomyVocabulary entities.
func (m *TaxonomyVocabularyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaxonomyVocabularyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaxonomyVocabularyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaxonomyVocabulary.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVid sets the "vid" field.
func (m *TaxonomyVocabularyMutation) SetVid(s string) {
	m.vid = &s
}

// Vid returns the value of the "vid" field in the mutation.
func (m *TaxonomyVocabularyMutation) Vid() (r string, exists bool) {
	v := m.vid
	if v == nil {
		return
	}
	return *v, true
}

// OldVid returns the old "vid" field's value of the TaxonomyVocabulary entity.
// If the TaxonomyVocabulary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyVocabularyMutation) OldVid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVid: %w", err)
	}
	return oldValue.Vid, nil
}

// ResetVid resets all changes to the "vid" field.
func (m *TaxonomyVocabularyMutation) ResetVid() {
	m.vid = nil
}

// SetLabel sets the "label" field.
func (m *TaxonomyVocabularyMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *TaxonomyVocabularyMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the TaxonomyVocabulary entity.
// If the TaxonomyVocabulary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyVocabularyMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *TaxonomyVocabularyMutation) ResetLabel() {
	m.label = nil
}

// SetWeight sets the "weight" field.
func (m *TaxonomyVocabularyMutation) SetWeight(i int) {
	m.weight = &i
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *TaxonomyVocabularyMutation) Weight() (r int, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the TaxonomyVocabulary entity.
// If the TaxonomyVocabulary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyVocabularyMutation) OldWeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds i to the "weight" field.
func (m *TaxonomyVocabularyMutation) AddWeight(i int) {
	if m.addweight != nil {
		*m.addweight += i
	} else {
		m.addweight = &i
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *TaxonomyVocabularyMutation) AddedWeight() (r int, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *TaxonomyVocabularyMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetDescription sets the "description" field.
func (m *TaxonomyVocabularyMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaxonomyVocabularyMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the TaxonomyVocabulary entity.
// If the TaxonomyVocabulary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyVocabularyMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TaxonomyVocabularyMutation) ResetDescription() {
	m.description = nil
}

// Where appends a list predicates to the TaxonomyVocabularyMutation builder.
func (m *TaxonomyVocabularyMutation) Where(ps ...predicate.TaxonomyVocabulary) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaxonomyVocabularyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TaxonomyVocabulary).
func (m *TaxonomyVocabularyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaxonomyVocabularyMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.vid != nil {
		fields = append(fields, taxonomyvocabulary.FieldVid)
	}
	if m.label != nil {
		fields = append(fields, taxonomyvocabulary.FieldLabel)
	}
	if m.weight != nil {
		fields = append(fields, taxonomyvocabulary.FieldWeight)
	}
	if m.description != nil {
		fields = append(fields, taxonomyvocabulary.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaxonomyVocabularyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taxonomyvocabulary.FieldVid:
		return m.Vid()
	case taxonomyvocabulary.FieldLabel:
		return m.Label()
	case taxonomyvocabulary.FieldWeight:
		return m.Weight()
	case taxonomyvocabulary.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaxonomyVocabularyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taxonomyvocabulary.FieldVid:
		return m.OldVid(ctx)
	case taxonomyvocabulary.FieldLabel:
		return m.OldLabel(ctx)
	case taxonomyvocabulary.FieldWeight:
		return m.OldWeight(ctx)
	case taxonomyvocabulary.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown TaxonomyVocabulary field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaxonomyVocabularyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taxonomyvocabulary.FieldVid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVid(v)
		return nil
	case taxonomyvocabulary.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case taxonomyvocabulary.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case taxonomyvocabulary.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown TaxonomyVocabulary field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaxonomyVocabularyMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, taxonomyvocabulary.FieldWeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaxonomyVocabularyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case taxonomyvocabulary.FieldWeight:
		return m.AddedWeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaxonomyVocabularyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case taxonomyvocabulary.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	}
	return fmt.Errorf("unknown TaxonomyVocabulary numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaxonomyVocabularyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaxonomyVocabularyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaxonomyVocabularyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TaxonomyVocabulary nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaxonomyVocabularyMutation) ResetField(name string) error {
	switch name {
	case taxonomyvocabulary.FieldVid:
		m.ResetVid()
		return nil
	case taxonomyvocabulary.FieldLabel:
		m.ResetLabel()
		return nil
	case taxonomyvocabulary.FieldWeight:
		m.ResetWeight()
		return nil
	case taxonomyvocabulary.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown TaxonomyVocabulary field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaxonomyVocabularyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaxonomyVocabularyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaxonomyVocabularyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaxonomyVocabularyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaxonomyVocabularyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaxonomyVocabularyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaxonomyVocabularyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TaxonomyVocabulary unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaxonomyVocabularyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TaxonomyVocabulary edge %s", name)
}
