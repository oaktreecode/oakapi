// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/oaktreecode/oakapi/ent/taxonomyvocabulary"
)

// TaxonomyVocabularyCreate is the builder for creating a TaxonomyVocabulary entity.
type TaxonomyVocabularyCreate struct {
	config
	mutation *TaxonomyVocabularyMutation
	hooks    []Hook
}

// SetVid sets the "vid" field.
func (tvc *TaxonomyVocabularyCreate) SetVid(s string) *TaxonomyVocabularyCreate {
	tvc.mutation.SetVid(s)
	return tvc
}

// SetLabel sets the "label" field.
func (tvc *TaxonomyVocabularyCreate) SetLabel(s string) *TaxonomyVocabularyCreate {
	tvc.mutation.SetLabel(s)
	return tvc
}

// SetWeight sets the "weight" field.
func (tvc *TaxonomyVocabularyCreate) SetWeight(i int) *TaxonomyVocabularyCreate {
	tvc.mutation.SetWeight(i)
	return tvc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (tvc *TaxonomyVocabularyCreate) SetNillableWeight(i *int) *TaxonomyVocabularyCreate {
	if i != nil {
		tvc.SetWeight(*i)
	}
	return tvc
}

// SetDescription sets the "description" field.
func (tvc *TaxonomyVocabularyCreate) SetDescription(s string) *TaxonomyVocabularyCreate {
	tvc.mutation.SetDescription(s)
	return tvc
}

// SetID sets the "id" field.
func (tvc *TaxonomyVocabularyCreate) SetID(u uuid.UUID) *TaxonomyVocabularyCreate {
	tvc.mutation.SetID(u)
	return tvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tvc *TaxonomyVocabularyCreate) SetNillableID(u *uuid.UUID) *TaxonomyVocabularyCreate {
	if u != nil {
		tvc.SetID(*u)
	}
	return tvc
}

// Mutation returns the TaxonomyVocabularyMutation object of the builder.
func (tvc *TaxonomyVocabularyCreate) Mutation() *TaxonomyVocabularyMutation {
	return tvc.mutation
}

// Save creates the TaxonomyVocabulary in the database.
func (tvc *TaxonomyVocabularyCreate) Save(ctx context.Context) (*TaxonomyVocabulary, error) {
	var (
		err  error
		node *TaxonomyVocabulary
	)
	tvc.defaults()
	if len(tvc.hooks) == 0 {
		if err = tvc.check(); err != nil {
			return nil, err
		}
		node, err = tvc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaxonomyVocabularyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tvc.check(); err != nil {
				return nil, err
			}
			tvc.mutation = mutation
			if node, err = tvc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tvc.hooks) - 1; i >= 0; i-- {
			if tvc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tvc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tvc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TaxonomyVocabulary)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TaxonomyVocabularyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tvc *TaxonomyVocabularyCreate) SaveX(ctx context.Context) *TaxonomyVocabulary {
	v, err := tvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tvc *TaxonomyVocabularyCreate) Exec(ctx context.Context) error {
	_, err := tvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tvc *TaxonomyVocabularyCreate) ExecX(ctx context.Context) {
	if err := tvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tvc *TaxonomyVocabularyCreate) defaults() {
	if _, ok := tvc.mutation.Weight(); !ok {
		v := taxonomyvocabulary.DefaultWeight
		tvc.mutation.SetWeight(v)
	}
	if _, ok := tvc.mutation.ID(); !ok {
		v := taxonomyvocabulary.DefaultID()
		tvc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tvc *TaxonomyVocabularyCreate) check() error {
	if _, ok := tvc.mutation.Vid(); !ok {
		return &ValidationError{Name: "vid", err: errors.New(`ent: missing required field "TaxonomyVocabulary.vid"`)}
	}
	if v, ok := tvc.mutation.Vid(); ok {
		if err := taxonomyvocabulary.VidValidator(v); err != nil {
			return &ValidationError{Name: "vid", err: fmt.Errorf(`ent: validator failed for field "TaxonomyVocabulary.vid": %w`, err)}
		}
	}
	if _, ok := tvc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "TaxonomyVocabulary.label"`)}
	}
	if v, ok := tvc.mutation.Label(); ok {
		if err := taxonomyvocabulary.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "TaxonomyVocabulary.label": %w`, err)}
		}
	}
	if _, ok := tvc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "TaxonomyVocabulary.weight"`)}
	}
	if _, ok := tvc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "TaxonomyVocabulary.description"`)}
	}
	return nil
}

func (tvc *TaxonomyVocabularyCreate) sqlSave(ctx context.Context) (*TaxonomyVocabulary, error) {
	_node, _spec := tvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tvc *TaxonomyVocabularyCreate) createSpec() (*TaxonomyVocabulary, *sqlgraph.CreateSpec) {
	var (
		_node = &TaxonomyVocabulary{config: tvc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taxonomyvocabulary.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: taxonomyvocabulary.FieldID,
			},
		}
	)
	if id, ok := tvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tvc.mutation.Vid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taxonomyvocabulary.FieldVid,
		})
		_node.Vid = value
	}
	if value, ok := tvc.mutation.Label(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taxonomyvocabulary.FieldLabel,
		})
		_node.Label = value
	}
	if value, ok := tvc.mutation.Weight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: taxonomyvocabulary.FieldWeight,
		})
		_node.Weight = value
	}
	if value, ok := tvc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taxonomyvocabulary.FieldDescription,
		})
		_node.Description = value
	}
	return _node, _spec
}

// TaxonomyVocabularyCreateBulk is the builder for creating many TaxonomyVocabulary entities in bulk.
type TaxonomyVocabularyCreateBulk struct {
	config
	builders []*TaxonomyVocabularyCreate
}

// Save creates the TaxonomyVocabulary entities in the database.
func (tvcb *TaxonomyVocabularyCreateBulk) Save(ctx context.Context) ([]*TaxonomyVocabulary, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tvcb.builders))
	nodes := make([]*TaxonomyVocabulary, len(tvcb.builders))
	mutators := make([]Mutator, len(tvcb.builders))
	for i := range tvcb.builders {
		func(i int, root context.Context) {
			builder := tvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaxonomyVocabularyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tvcb *TaxonomyVocabularyCreateBulk) SaveX(ctx context.Context) []*TaxonomyVocabulary {
	v, err := tvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tvcb *TaxonomyVocabularyCreateBulk) Exec(ctx context.Context) error {
	_, err := tvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tvcb *TaxonomyVocabularyCreateBulk) ExecX(ctx context.Context) {
	if err := tvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
